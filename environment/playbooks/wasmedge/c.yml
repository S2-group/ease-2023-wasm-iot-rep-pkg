---
- hosts: pis
  vars:
    emsdk_version: 3.1.7
  tasks:
    # get prereq
    - name: Check prereq - git
      become: true
      apt:
        name: git
        update_cache: yes
        state: present

    - name: Check prereq - cmake
      become: true
      apt:
        name: cmake
        state: present

    - name: Download Node
      become: true
      shell: 'curl -fsSL https://deb.nodesource.com/setup_16.x | bash -' # TODO: for some reason, 12 is installed

    - name: Install Node 16
      become: true
      apt:
        name: nodejs
        state: present
    
    # follow https://emscripten.org/docs/building_from_source/ because emcc is not precompiled for ARM64
    ## LLVM
    - name: Get LLVM
      git:
        repo: 'https://github.com/llvm/llvm-project.git'
        dest: /home/pi/llvm-project
        version: llvmorg-15.0.1
    
    - name: Create build dir LLVM
      file:
        path: /home/pi/buildLLVM
        state: directory
        mode: '0755'

    - name: Build LLVM
      shell:
        chdir: /home/pi/buildLLVM
        cmd: cmake ../llvm-project -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_PROJECTS='lld;clang' -DLLVM_TARGETS_TO_BUILD=\"host;WebAssembly\" -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF

    - name: Build LLVM 2
      shell:
        chdir: /home/pi/buildLLVM
        cmd: 'cmake --build .'

    ## Binaryen
    - name: Download Binaryen
      git:
        repo: 'https://github.com/WebAssembly/binaryen.git'
        dest: /home/pi/binaryen
        recursive: yes # make sure to update the submodules
        update: yes
        version: 'version_110'
        
    - name: Build Binaryen
      shell:
        chdir: /home/pi/binaryen
        cmd: 'cmake -DBUILD_TESTS=OFF . && make' # also disable tests as explained in README of Binaryen project

    ## Ems part
    - name: Download Emscripten
      git:
        repo: 'https://github.com/emscripten-core/emscripten.git'
        dest: /home/pi/emscripten
        version: 3.1.22

    - name: Create Config
      copy:
        dest: /home/pi/temp/emscripten/.emscripten
        content: |
          EMSCRIPTEN_ROOT = '/home/pi/temp/emscripten' # directory
          LLVM_ROOT = '/home/pi/buildLLVM/bin' # directory
          BINARYEN_ROOT = '/usr/local' # directory # TODO
          NODE_JS = 'node' # executable
          JAVA = 'java' # executable

    # Check installation with Hello World!
    - name: Copy Hello World
      copy:
        src: playbooks/wasmedge/resources/helloWorld.c # ! relative, run from dir "pi"
        dest: /tmp/helloWorld.c

    - name: Compile Hello World
      shell:
        chdir: /tmp
        cmd: | 
          emcc -g -Oz --llvm-lto 1 -s STANDALONE_WASM -s INITIAL_MEMORY=32MB -s MAXIMUM_MEMORY=4GB \
          -mmutable-globals \
          -mnontrapping-fptoint \
          -msign-ext \
          helloWorld.c -o helloWorldC.wasm
    
    - name: Run Hello World
      shell:
        chdir: /tmp
        cmd: wasmedge helloWorldC.wasm 15000
